
:shoplink: ../../../shop/bricklets/rs485-bricklet.html

.. include:: RS485.substitutions
   :start-after: >>>substitutions
   :end-before: <<<substitutions

.. _rs485_bricklet:

RS485 Bricklet
==============

.. raw:: html

	{% tfgallery %}

	Bricklets/bricklet_rs485_tilted_[?|?].jpg           RS485 Bricklet
	Bricklets/bricklet_rs485_top_[?|?].jpg              RS485 Bricklet
	Bricklets/bricklet_rs485_bottom_[?|?].jpg           RS485 Bricklet
	Cases/bricklet_rs485_case_built_up1_[?|?].jpg       RS485 Bricklet in case
	Cases/bricklet_rs485_case_built_up2_[?|?].jpg       RS485 Bricklet in case
	Bricklets/bricklet_rs485_brickv_[100|].png          RS485 Bricklet in Brick Viewer
	Bricklets/bricklet_rs485_brickv_modbus_[100|].png   RS485 Bricklet in Brick Viewer
	Dimensions/rs485_bricklet_dimensions_[100|600].png  Outline and drilling plan

	{% tfgalleryend %}


Features
--------

* Unterstützt low-level RS485 sowie Modbus-RTU-Master/Slave
* Modbus-RTU-Implementierung standardkonform für alle Read/Write-Funktionen von Coils und Registern
* Unterstützt Halb- und Voll-Duplex
* Konfigurierbare Baudrate, Parität, Stoppbits und Wortlänge
* Schaltbare 120 Ohm Terminierung


.. _rs485_bricklet_description:

Beschreibung
------------

Mit dem RS485 :ref:`Bricklet <primer_bricklets>` können
:ref:`Bricks <primer_bricks>` differentielle Daten über
`RS-485 <https://en.wikipedia.org/wiki/RS-485>`__ empfangen und senden.

Es unterstützt Halb- und Voll-Duplex und hat eine konfigurierbare Terminierung.

Das Bricklet hat drei Modi:

* RS485,
* Modbus-RTU-Master und
* Modbus-RTU-Slave.

Im RS485-Modus können beliebige Daten empfangen und gesendet werden. Die Modbus-Modi
sind Modbus-Standardkonform. Im  Modbus-RTU-Master-Modus können beliebige Coils/Register
von einem Slave gelesen und gesetzt werden. Im Modbus-RTU-Slave-Modus ist möglich Daten
für Coils/Register bereitzustellen und über eine Modbus-Master Schreiboperation
zu empfangen.

Das Bricklet verfügt über keine galvanische Trennung zum Tinkerforge System. 
Das heißt es gibt eine direkte elektrische Verbindung zwischen den 
Anschlussklemmen des Bricklets und dem restlichen System. Sollte dies in der 
jeweiligen Anwendung zu ungewollten Verbindungen, Masseschleifen oder 
Kurzschlüssen führen, so ist der Einsatz zusammen mit einem :ref:`Isolator Bricklet <isolator_bricklet>` ratsam.

Das RS485 Bricklet hat einen 7 Pol Bricklet Stecker und wird
mit einem ``7p-10p`` Bricklet Kabel mit einem Brick verbunden.


Technische Spezifikation
------------------------

================================  ============================================================
Eigenschaft                       Wert
================================  ============================================================
Stromverbrauch                    64mW (12,8mA bei 5V, Idle)
--------------------------------  ------------------------------------------------------------
--------------------------------  ------------------------------------------------------------
Baudrate                          100 - 2000000 baud
Parität                           keine / ungerade / gerade
Stoppbits                         1 / 2
Wortlänge                         5 / 6 / 7 / 8
Duplex                            halb / voll
--------------------------------  ------------------------------------------------------------
--------------------------------  ------------------------------------------------------------
Abmessungen (B x T x H)           40 x 40 x 14mm (1,57 x 1,57 x 0,55")
Gewicht                           13g
================================  ============================================================


Ressourcen
----------

* Schaltplan (`Download <https://github.com/Tinkerforge/rs485-bricklet/raw/master/hardware/rs485-schematic.pdf>`__)
* Umriss und Bohrplan (`Download <../../_images/Dimensions/rs485_bricklet_dimensions.png>`__)
* Quelltexte und Platinenlayout (`Download <https://github.com/Tinkerforge/rs485-bricklet/zipball/master>`__)
* 3D Modell (`Online ansehen <https://autode.sk/2BWiYin>`__ | Download: `STEP <https://download.tinkerforge.com/3d/bricklets/rs485/rs485.step>`__, `FreeCAD <https://download.tinkerforge.com/3d/bricklets/rs485/rs485.FCStd>`__)


Anschlussmöglichkeiten
----------------------

Im Voll-Duplex Modus müssen TX+, TX-, RX+, RX- und GND verbunden werden.

Im Halb-Duplex Modus sind TX+ / RX+ und TX- / RX- gebrückt, es reicht also entweder
TX+ / TX- / GND oder RX+ / RX- / GND zu verbinden. Es ist auch möglich darüber eine
Kette von Modbus Geräten zu verbinden.

.. image:: /Images/Bricklets/bricklet_rs485_connectivity_600.jpg
   :scale: 100 %
   :alt: RS485 Bricklet Verbindungsmöglichkeiten
   :align: center
   :target: ../../_images/Bricklets/bricklet_rs485_connectivity_1000.jpg


Duplex und Terminierung
-----------------------

Mit dem DIP-Schalter auf dem Bricklet können Duplex und Terminierung konfiguriert
werden.

Es kann zwischen Voll- und Halb-Duplex gewählt werden und eine 120 Ohm
Terminierung kann ein- und aus-geschaltet werden.

.. image:: /Images/Bricklets/bricklet_rs485_dip_800.jpg
   :scale: 100 %
   :alt: RS485 Bricklet DIP-Schalter Einstellungen
   :align: center
   :target: ../../_images/Bricklets/bricklet_rs485_dip_1200.jpg

Eine Legende mit den unterschiedlichen Konfigurationsmöglichkeiten befindet sich auch
auf der Unterseite des Bricklets.

Modbus-RTU-Funktionen
---------------------

Im Modbus-Master/Slave-Modus können Modbus-Nachrichten gesendet und empfangen
werden. Zum Beispiel kann ein Modbus-Master eine Anfrage an einen Modbus-Slave
senden. Die Modbus-Funktionen basieren auf Callbacks.

Zum besseren Verständnis des generellen Konzepts beschreiben wir hier ein
Szenario. In diesem Szenario sind zwei RS485-Bricklets im Bus. Eins ist im
Modbus-Master-Modus und das andere ist im Modbus-Slave-Modus. Der Modbus-Master möchte 4 Register beginnend mit dem Register 400002 (also dem zweiten Holding Register) vom Modbus-Slave mit Adresse 8 lesen:

1. Dazu registriert der Master den *modbus_master_read_holding_registers_response*
   Callback, welcher ausgeführt wird, wenn der Slave auf eine Anfrage des Masters
   antwortet. Das Bricklet welches im Slave-Modus operiert, muss sich auf den
   *modbus_slave_read_holding_registers_request* registrieren. Dieser
   wird bei Empfangen einer Anfrage aufgerufen.
2. Der Master ruft die Funktion *modbus_master_read_holding_registers* auf.
   Die Parameter der Funktion sind die Slave-Adresse, die Nummer des ersten Registers
   und die Anzahl der zu lesenden Register. Dabei ist die Präfix-Ziffer 4, die das
   Register als Holding Register ausweist, implizit. Es muss also nur 2 als Registernummer übergeben werden.
   Die Funktion sendet die Anfrage auf dem Bus.
3. Auf der Slave-Seite wird der registrierte Callback aufgerufen. Die Parameter
   zeigen, dass der Master 4 Holding Register beginnend beim Register 2 lesen möchte.
4. Der Slave ruft die Funktion *modbus_slave_answer_read_holding_registers_request*
   mit den angeforderten Daten auf, diese sendet die Antwort auf dem Bus.
5. Nach Empfang der Antwort wird beim Master der Callback
   *modbus_master_read_holding_registers_response* aufgerufen mit den angeforderten
   Daten aufgerufen.

Für Details dieser Funktionen siehe :ref:`Programmierschnittstelle <rs485_bricklet_programming_interface>`.

Alle Verfügbaren Modbus-Funktionen können auch über den Brick Viewer ausprobiert werden:

.. image:: /Images/Bricklets/bricklet_rs485_brickv_modbus.png
   :scale: 100 %
   :alt: RS485 Bricklet im Brick Viewer
   :align: center
   :target: ../../_images/Bricklets/bricklet_rs485_brickv_modbus.png


.. _rs485_bricklet_test:

Erster Test
-----------

|test_intro|

|test_connect|.
Verbinde dann den RX+ mit dem TX+ Pin und den RX- mit dem TX- Pin mit jeweils
einem kleinen Kabel, damit das Bricklet seine eigene Ausgabe zurück liest. Konfiguriere
die DIP-Schalter auf Voll-Duplex, abhängig von den Kabeln mit oder ohne Terminierung.

|test_tab| Konfiguriere hier den Modus RS485 und die Duplexoption Full-Duplex und drücke
den Save Configuration-Button Wenn alles wie erwartet funktioniert, kann jetzt
Text in das Eingabefeld getippt und mit Enter abgeschickt werden.
Der gleiche Text sollte dann im Textfeld darüber erscheinen.

.. image:: /Images/Bricklets/bricklet_rs485_brickv.png
   :scale: 100 %
   :alt: RS485 Bricklet im Brick Viewer
   :align: center
   :target: ../../_images/Bricklets/bricklet_rs485_brickv.png

|test_pi_ref|


.. _rs485_bricklet_case:

Gehäuse
-------

Ein `laser-geschnittenes Gehäuse für das RS485 Bricklet
<https://www.tinkerforge.com/de/shop/cases/case-rs485-bricklet.html>`__ ist verfügbar.

.. image:: /Images/Cases/bricklet_rs485_case_built_up1_350.jpg
   :scale: 100 %
   :alt: Gehäuse für RS485 Bricklet
   :align: center
   :target: ../../_images/Cases/bricklet_rs485_case_built_up1_1000.jpg

.. include:: RS485.substitutions
   :start-after: >>>bricklet_case_steps
   :end-before: <<<bricklet_case_steps

.. image:: /Images/Exploded/rs485_exploded_350.png
   :scale: 100 %
   :alt: Explosionszeichnung für RS485 Bricklet
   :align: center
   :target: ../../_images/Exploded/rs485_exploded.png

|bricklet_case_hint|

.. _rs485_bricklet_programming_interface:

Programmierschnittstelle
------------------------

Siehe :ref:`Programmierschnittstelle <programming_interface>` für eine detaillierte
Beschreibung.

.. include:: RS485_hlpi.table
