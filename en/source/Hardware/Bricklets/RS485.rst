
:shoplink: ../../../shop/bricklets/rs485-bricklet.html

.. include:: RS485.substitutions
   :start-after: >>>substitutions
   :end-before: <<<substitutions

.. _rs485_bricklet:

RS485 Bricklet
==============

.. raw:: html

	{% tfgallery %}

	Bricklets/bricklet_rs485_tilted_[?|?].jpg           RS485 Bricklet
	Bricklets/bricklet_rs485_top_[?|?].jpg              RS485 Bricklet
	Bricklets/bricklet_rs485_bottom_[?|?].jpg           RS485 Bricklet
	Cases/bricklet_rs485_case_built_up1_[?|?].jpg       RS485 Bricklet in case
	Cases/bricklet_rs485_case_built_up2_[?|?].jpg       RS485 Bricklet in case
	Bricklets/bricklet_rs485_brickv_[100|].png          RS485 Bricklet in Brick Viewer
	Bricklets/bricklet_rs485_brickv_modbus_[100|].png   RS485 Bricklet in Brick Viewer
	Dimensions/rs485_bricklet_dimensions_[100|600].png  Outline and drilling plan

	{% tfgalleryend %}


Features
--------

* Supports low-level RS485 as well as Modbus RTU master/slave
* Modbus RTU implementation is fully compliant for reading and writing of coils and registers
* Supports full- and half-duplex
* Configurable baudrate, parity, stop bits and word length
* Switchable 120 Ohm termination


.. _rs485_bricklet_description:

Description
-----------

The RS485 :ref:`Bricklet <primer_bricklets>` can be used to
extend the features of :ref:`Bricks <primer_bricks>` by the capability to send
and receive differential data with `RS-485 <https://en.wikipedia.org/wiki/RS-485>`__.

It supports full- and half-duplex and has configurable termination.

You can use the Bricklet in RS485, Modbus RTU master and Modbus RTU slave mode.

In RS485 mode you can send and receive arbitrary data. The Modbus modes are fully
Modbus compliant. In Modbus RTU master mode you can write and read any coils/registers
from a slave. In Modbus RTU slave mode you can provide data for coil/register reads
and you receive the data that a Modbus master writes to the coils/registers.

This Bricklet ist not galvanically isolated to the Tinkerforge system. 
This means that there is a direct electrical connection between the terminals 
of the Bricklet and the rest of the system. Dependent of the application 
this can lead to undesired connections, ground loops or short circuits. 
These problems can be prevented by using the Bricklet together with a :ref:`Isolator Bricklet <isolator_bricklet>`.

Technical Specifications
------------------------

================================  ============================================================
Property                          Value
================================  ============================================================
Current Consumption               64mW (12.8mA at 5V, idle)
--------------------------------  ------------------------------------------------------------
--------------------------------  ------------------------------------------------------------
Baudrate                          100 - 2000000 baud
Parity                            none / odd / even
Stop bits                         1 / 2
Word length                       5 / 6 / 7 / 8
Duplex                            half / full
--------------------------------  ------------------------------------------------------------
--------------------------------  ------------------------------------------------------------
Dimensions (W x D x H)            40 x 40 x 14mm (1.57 x 1.57 x 0.55")
Weight                            13g
================================  ============================================================


Resources
---------

* Schematic (`Download <https://github.com/Tinkerforge/rs485-bricklet/raw/master/hardware/rs485-schematic.pdf>`__)
* Outline and drilling plan (`Download <../../_images/Dimensions/rs485_bricklet_dimensions.png>`__)
* Source code and design files (`Download <https://github.com/Tinkerforge/rs485-bricklet/zipball/master>`__)
* 3D model (`View online <https://autode.sk/2BWiYin>`__ | Download: `STEP <https://download.tinkerforge.com/3d/bricklets/rs485/rs485.step>`__, `FreeCAD <https://download.tinkerforge.com/3d/bricklets/rs485/rs485.FCStd>`__)


Connectivity
------------

In full-duplex mode you have to connect TX+, TX-, RX+, RX- and GND.

In half-duplex mode TX+ / RX+ and TX- / RX- are shorted, so you can connect
either TX+ / TX- / GND or RX+ / RX- / GND. You can also use this to chain-connect
other devices.

.. image:: /Images/Bricklets/bricklet_rs485_connectivity_600.jpg
   :scale: 100 %
   :alt: RS485 Bricklet connection possibilities
   :align: center
   :target: ../../_images/Bricklets/bricklet_rs485_connectivity_1000.jpg

Duplex and Termination configuration
------------------------------------

The DIP switches on the Bricklet can be used to configure duplex and termination
configuration.

You can configure between Full-Duplex and Half-Duplex and you can enable or disable
a 120 Ohm termination resistor.

.. image:: /Images/Bricklets/bricklet_rs485_dip_800.jpg
   :scale: 100 %
   :alt: RS485 Bricklet DIP settings
   :align: center
   :target: ../../_images/Bricklets/bricklet_rs485_dip_1200.jpg

A legend of the different configuration possibilities can also be found in the bottom
of the Bricklet.

* DIP switch 1 connects a 120 Ohm termination resistor between TX+ and TX-
* DIP switch 2 connects TX+ to RX+ for Half-Duplex operation
* DIP switch 3 connects TX- to RX- for Half-Duplex operation
* DIP switch 4 connects a 120 Ohm termination resistor between RX+ and RX-

The total termination resistance in a single bus has to be 120 Ohm. Because of
this only DIP switch 1 is on and DIP switch 4 stays off in Half-Duplex terminated
mode. Otherwise both 120 Ohm termination resistors would be connected in parallel
due to the TX+/RX+ and TX-/RX- connections resulting in 60 Ohm total termination
resistance.

Modbus RTU Functions
--------------------

The Bricklet can be configured to operate on Modbus RTU master/slave mode. In this
mode Modbus specific protocol messages can be sent and received. A Modbus master
can send a request to a Modbus slave connected to the bus. These Modbus functions
are based on callbacks.

To better understand the general concept a scenario is described. In this
scenario two RS485 Bricklets are present on the bus. One operating in Modbus
master mode and the other in Modbus slave mode. The Modbus master wants to 
read 4 registers starting with the register 400002 (e.g. the second holding register)
from Modbus slave at address 8:

1. The master registers the *modbus_master_read_holding_registers_response*
   callback which will be called when the slave sends a response to the master.
   The Bricklet that is operating in slave mode registers the
   *modbus_slave_read_holding_registers_request* callback which will be called
   when a corresponding request is received.
2. The master calls the function *modbus_master_read_holding_registers*.
   Parameters of this function specifies the slave address, the number of the first register and
   the number of registers to read. The prefix digit 4, that identifies the register as holding register, is implicit and has to be omitted. This function sends the request on the bus.
3. On the slave side the registered callback is invoked with the parameters which
   specifies that the master wants to read 4 holding registers starting from register 2.
4. The slave calls the function *modbus_slave_answer_read_holding_registers_request*
   with the requested data which sends the response on the bus.
5. Upon receiving the response from the slave the *modbus_master_read_holding_registers_response*
   callback is called on the master side with the data provided by the slave.

For details of these functions refer to the :ref:`programming interface <rs485_bricklet_programming_interface>`
section.

All of the available Modbus functions can also be used in Brick Viewer:

.. image:: /Images/Bricklets/bricklet_rs485_brickv_modbus.png
   :scale: 100 %
   :alt: RS485 Bricklet in Brick Viewer
   :align: center
   :target: ../../_images/Bricklets/bricklet_rs485_brickv_modbus.png


.. _rs485_bricklet_test:

Test your RS485 Bricklet
------------------------

|test_intro|

|test_connect|.
Connect the RX+ to the TX+ pin and the RX- to the TX- pin with two cables to make the Bricklet read back its
own output. Configure the DIP switches to full duplex mode, with half termination (1: on, 2: off, 3: off, 4: off).
This is a diversion from the normal Full-Duplex terminated setting, because the Bricklet talks back to itself
for this test. Otherwise the total termination resistance would be 60 Ohm instead of 120 Ohm if both 120 Ohm
termination resistors would be connected in parallel.

|test_tab|
Set the mode to RS485 and the duplex option to full duplex and then click Save Configuration.
If everything went as expected you can now type some text into the input
editbox and hit enter. The same text should then show up in the textarea above.

.. image:: /Images/Bricklets/bricklet_rs485_brickv.png
   :scale: 100 %
   :alt: RS485 Bricklet in Brick Viewer
   :align: center
   :target: ../../_images/Bricklets/bricklet_rs485_brickv.png

|test_pi_ref|


.. _rs485_bricklet_case:

Case
----

A `laser-cut case for the RS485 Bricklet
<https://www.tinkerforge.com/en/shop/cases/case-rs485-bricklet.html>`__
is available.

.. image:: /Images/Cases/bricklet_rs485_case_built_up1_350.jpg
   :scale: 100 %
   :alt: Case for RS485 Bricklet
   :align: center
   :target: ../../_images/Cases/bricklet_rs485_case_built_up1_1000.jpg

.. include:: RS485.substitutions
   :start-after: >>>bricklet_case_steps
   :end-before: <<<bricklet_case_steps

.. image:: /Images/Exploded/rs485_exploded_350.png
   :scale: 100 %
   :alt: Exploded assembly drawing for RS485 Bricklet
   :align: center
   :target: ../../_images/Exploded/rs485_exploded.png

|bricklet_case_hint|

.. _rs485_bricklet_programming_interface:

Programming Interface
---------------------

See :ref:`Programming Interface <programming_interface>` for a detailed description.

.. include:: RS485_hlpi.table
